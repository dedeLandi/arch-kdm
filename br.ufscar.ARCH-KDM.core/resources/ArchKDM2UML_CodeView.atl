module ArchKDM2UML_CodeView;
create umlOutput: uml from kdmInput: kdm;

-- Bruno CÃ©sar Gasparini --

-- ### Helpers ### -- begin
helper context kdm!Datatype def: isCollection(): Boolean =
	if (self.name.oclIsUndefined()) then
		false
	else
		if (self.name -> startsWith('Collection')) then
			true
		else
			if (self.oclIsTypeOf(kdm!TemplateType)) then
				self -> getTemplateUnit() -> isCollection()
			else
				if (self.oclIsTypeOf(kdm!TemplateUnit)) then
					self -> getRealType() -> isCollection()
				else
					if (self -> getInheritanceLinks() -> isEmpty()) then
						false
					else
						let parents: Sequence(kdm!AbstractCodeRelationship) =
							self -> getInheritanceLinks()
						in
							parents -> exists(parent | parent.to -> isCollection())
					endif
				endif
			endif
		endif
	endif;

helper context kdm!Datatype def: isMap(): Boolean =
	if (self.name.oclIsUndefined()) then
		false
	else
		if (self.name -> startsWith('Map')) then
			true
		else
			if (self.oclIsTypeOf(kdm!TemplateType)) then
				self -> getTemplateUnit() -> isMap()
			else
				if (self.oclIsTypeOf(kdm!TemplateUnit)) then
					self -> getRealType() -> isMap()
				else
					if (self -> getInheritanceLinks() -> isEmpty()) then
						false
					else
						let parents: Sequence(kdm!AbstractCodeRelationship) =
							self -> getInheritanceLinks()
						in
							parents -> exists(parent | parent.to -> isMap())
					endif
				endif
			endif
		endif
	endif;

helper context kdm!TemplateType def: getTemplateUnit(): kdm!Datatype =
	let link: kdm!InstanceOf =
		self.codeRelation -> select(e | e.oclIsTypeOf(kdm!InstanceOf)) -> first()
	in
		if (link.oclIsUndefined()) then
			OclUndefined
		else
			if (link.to.oclIsUndefined()) then
				let otherLink: kdm!HasType =
					self.codeRelation -> select(e | e.oclIsTypeOf(kdm!HasType)) -> first()
				in
					if (otherLink.oclIsUndefined()) then
						OclUndefined
					else
						otherLink.to
					endif
			else
				link.to
			endif
		endif;

helper context kdm!TemplateUnit def: getRealType(): kdm!CodeItem =
	self.codeElement -> select(e | not e.oclIsTypeOf(kdm!TemplateParameter)) -> first();

helper context kdm!InterfaceUnit def: getRealType(): kdm!Datatype =
	self;

helper context kdm!ClassUnit def: getRealType(): kdm!Datatype =
	self;

helper context kdm!Datatype def: getInheritanceLinks():
		Sequence(kdm!AbstractCodeRelationship) =
	if ((self.oclIsTypeOf(kdm!EnumeratedType)) or (self.oclIsTypeOf(kdm!ClassUnit)) or
			(self.oclIsTypeOf(kdm!InterfaceUnit)) or (self.
			oclIsTypeOf(kdm!TemplateUnit))) then
		self.codeRelation -> select(e | e.oclIsTypeOf(kdm!Extends) or e.
				oclIsTypeOf(kdm!Implements))
	else
		Sequence{}
	endif;

helper context kdm!TemplateType def: getTemplateTypeBinding(): kdm!Datatype =
	let parameter: kdm!ParameterTo =
		self.codeRelation -> select(e | e.oclIsTypeOf(kdm!ParameterTo)) -> last()
	in
		if (parameter.to.oclIsTypeOf(kdm!TemplateType)) then
			if (parameter.to -> isCollection() or parameter.to -> isMap()) then
				parameter.to -> getTemplateTypeBinding()
			else
				parameter.to
			endif
		else
			parameter.to
		endif;

helper context kdm!Datatype def: isPrimitiveType(): Boolean =
	if (self.oclIsUndefined() or (self.oclIsKindOf(kdm!PrimitiveType))) then
		true
	else
		-- specific case for primitive objects
		if ((self.name = 'String') or (self.name = 'Integer') or (self.name = 'Long') or
				(self.name = 'Short') or (self.name = 'Float') or (self.name = 'Double')
				or (self.name = 'Boolean') or (self.name = 'Number')) then
			true
		else
			false
		endif
	endif;

helper context kdm!Element def: getVisibility(): uml!VisibilityKind =
	if (self.oclIsTypeOf(kdm!MethodUnit)) then
		self -> getMethodVisibility()
	else
		if (self.oclIsTypeOf(kdm!Datatype)) then
			self -> getDatatypeVisibility()
		else
			#public
		endif
	endif;

helper context kdm!DataElement def: getUpperCardinality(): Integer =
	if (not self.size.oclIsUndefined()) then
		self.size
	else
		if (not self.type.oclIsUndefined()) then
			if (self.type.oclIsKindOf(kdm!ArrayType)) then
				-1
			else
				if (self.type.oclIsTypeOf(kdm!TemplateType)) then
					if (self.type -> isCollection() or self.type -> isMap()) then
						-1
					else
						1
					endif
				else
					1
				endif
			endif
		else
			1
		endif
	endif;

helper context kdm!DataElement def: getDataElementType(): kdm!Datatype =
	if (self.type.oclIsTypeOf(kdm!TemplateType)) then
		if (self.type -> isCollection() or self.type -> isMap()) then
			self.type -> getTemplateTypeBinding()
		else
			self.type
		endif
	else
		if (self.type.oclIsTypeOf(kdm!ArrayType)) then
			self.type.itemUnit.type
		else
			self.type
		endif
	endif;

--helper context kdm!CodeItem def : getParent() : kdm!Package =
--	if (self.refImmediateComposite().oclIsTypeOf(kdm!Package)) then
--		self.refImmediateComposite()
--	else
--		if (self.refImmediateComposite().oclIsKindOf(kdm!CodeItem)) then
--			self.refImmediateComposite()->getParent()
--		else
--			thisModule->findExternalPackage()
--		endif
--	endif;
helper context kdm!CodeItem def: getParent(): kdm!Element =
	self.refImmediateComposite();

---- Helper to find out whether a given entity (argument) is descendant of the context
--- object (self)
--helper context kdm!KDMEntity def: isDescendantOf(entity: kdm!KDMEntity): Boolean =
--	if self = entity then
--		true
--	else
--		if self.refImmediateComposite().oclIsTypeOf(kdm!CodeModel) then -- Stops the
--- recursive search at the CodeModel. It is assumed that the model is the root on the
--- family tree.
--			false
--		else
--			self.refImmediateComposite().isDescendantOf(entity)
--		endif
--	endif;
---- Helper to find out which violated layer the given context object (self) belongs to.
--- If it doesn't belong to any, OciUndefined is returned.
--helper context kdm!KDMEntity def : findViolatedStructure() : kdm!Layer =
--	kdm!Layer.allInstances()
--		->select(layer |
--			layer.getModelContainer().name = 'violations'
--			and not (layer.inAggregated->isEmpty() and layer.outAggregated->isEmpty())
--			and (
--				layer.outAggregated->exists(
--					aggregated | aggregated.relation->exists(
--						relation | relation.from.isDescendantOf(self)))
--				or
--				layer.inAggregated->exists(
--					aggregated | aggregated.relation->exists(
--						relation | relation.to.isDescendantOf(self)))
--			)
--		)->first();
--helper context kdm!KDMRelationship def : findRelationshipViolatedLayer() : kdm!Layer =
--	kdm!Layer.allInstances()
--		->select(layer |
--			layer.getModelContainer().name = 'violations'
--			and not (layer.inAggregated->isEmpty() and layer.outAggregated->isEmpty())
--			and (
--				layer.outAggregated->exists(
--					aggregated | aggregated.relation->exists(
--						relation | relation = self))
--				or
--				layer.inAggregated->exists(
--					aggregated | aggregated.relation->exists(
--						relation | relation = self))
--			)
--		)->first();
--entrypoint rule test() {
--	using {
--		layer: kdm!AbstractStructureElement =
-- kdm!AbstractStructureElement.allInstances() -> select(layer | layer.name =
-- 'LayerA') -> first();
--	}
--	do {
--		kdm!Implements.allInstances()->select(ext |
-- ext.isDescendantOf(layer.implementation->first())).debug('teste');
--	}
--}

---- Helper to find out whether a given entity (argument) is descendant of the context
--- object (self)
helper context kdm!Element def: isDescendantOf(element: kdm!Element): Boolean =
	if self = element then
		true
	else
		if self.refImmediateComposite().oclIsUndefined() then
			-- Stops the recursive search at the CodeModel. It is assumed that the model
			-- is the root on the family tree.
			false
		else
			self.refImmediateComposite().isDescendantOf(element)
		endif
	endif;

helper context kdm!KDMEntity def: isEntityViolation(): Boolean =
	kdm!AbstractStructureElement.allInstances() -> exists(layer | layer.
			getModelContainer().name = 'violations' and not (layer.inAggregated ->
			isEmpty() and layer.outAggregated -> isEmpty()) and (
				layer.outAggregated -> exists(aggregated | aggregated.relation ->
						exists(relation | relation.from.isDescendantOf(self))) or layer.
						inAggregated -> exists(aggregated | aggregated.relation ->
						exists(relation | relation.to.isDescendantOf(self)))
			)) and kdm!AbstractStructureElement.allInstances() -> exists(layer | layer.
					implementation -> exists(impl | self.isDescendantOf(impl)));

helper context kdm!KDMRelationship def: isRelationshipViolation(): Boolean =
	kdm!AbstractStructureElement.allInstances() -> exists(layer | layer.
			getModelContainer().name = 'violations' and not (layer.inAggregated ->
			isEmpty() and layer.outAggregated -> isEmpty()) and (
				layer.outAggregated -> exists(aggregated | aggregated.relation ->
						exists(relation | relation = self)) or layer.inAggregated ->
						exists(aggregated | aggregated.relation -> exists(relation |
						relation = self))
			)) and kdm!AbstractStructureElement.allInstances() -> exists(layer | layer.
					implementation -> exists(impl | self.isDescendantOf(impl)));

--helper context kdm!KDMRelationship def: findRelationshipViolatedLayer(): kdm!Layer =
--	if kdm!AbstractStructureElement.allInstances() -> exists(structure |
		-- structure.implementation -> exists(impl | impl = self)) then
--		kdm!AbstractStructureElement.allInstances() -> select(structure |
		-- structure.implementation -> exists(impl | impl = self)) -> first()
--	else
--		if self.refImmediateComposite().oclIsTypeOf(kdm!CodeModel) then
--			OclUndefined
--		else
--			self.refImmediateComposite().findViolatedStructure()
--		endif
--	endif;
--helper context kdm!KDMRelationship def: findRelationshipViolatedLayer(): kdm!Layer =
--	kdm!Layer.allInstances() -> select(layer | layer.getModelContainer().name =
--			'violations' and layer.implementation -> exists(implementation | self.
--			isDescendantOf(implementation))) -> first();
--entrypoint rule test() {
--	using {
--		segment: kdm!CodeModel = kdm!CodeModel.allInstances()->select(model |
		-- model.name = 'SystemExampleMVC-SimplesComDesvios')->first();
--		elements: kdm!KDMEntity = kdm!KDMEntity.allInstances()->select(entity |
		-- entity.isDescendantOf(segment));
--		l1: kdm!Layer = OclUndefined;
--		l2: kdm!Layer = OclUndefined;
--	}
--	do {
--		for (element in elements) {
--			l1 <- element.findViolatedStructure();
--			l2 <- element.findViolatedStructure2();
--			if (not (l1.oclIsUndefined() or l2.oclIsUndefined())) {
--				if (l1 = l2) {
--					element.findViolatedStructure().debug('');
--					element.findViolatedStructure2().debug('');
--				}
--			}
--		}
--	}
--}
helper context kdm!KDMEntity def: findViolatedStructure(): kdm!AbstractStructureElement =
	kdm!AbstractStructureElement.allInstances() -> select(structure | structure.
			getModelContainer().name = 'violations' and structure.implementation ->
			exists(impl | impl = self.findViolatedStructureImplementation())) -> first();

helper context kdm!KDMEntity def: findViolatedStructureImplementation():
		kdm!AbstractCodeElement =
	if kdm!AbstractStructureElement.allInstances() -> exists(structure | structure.
			getModelContainer().name = 'violations' and structure.implementation ->
			exists(impl | impl = self)) then
		self
	else
		if self.refImmediateComposite().oclIsTypeOf(kdm!CodeModel) then
			OclUndefined
		else
			self.refImmediateComposite().findViolatedStructureImplementation()
		endif
	endif;

--helper context kdm!KDMEntity def: findViolatedStructure(): kdm!Layer =
--	kdm!Layer.allInstances() -> select(layer | layer.getModelContainer().name =
--			'violations' and layer.implementation -> exists(implementation | self.
--			isDescendantOf(implementation))) -> first();
helper context kdm!Element def: getModelContainer(): kdm!CodeModel =
	if (self.oclIsTypeOf(kdm!CodeModel) or self.oclIsTypeOf(kdm!StructureModel)) then
		self
	else 
		self.refImmediateComposite().getModelContainer()
	endif;

helper context kdm!Element def: getDataTypeContainer(): kdm!DataType =
	if (self.oclIsTypeOf(kdm!ClassUnit) or self.oclIsTypeOf(kdm!EnumeratedType) or self.
			oclIsTypeOf(kdm!InterfaceUnit)) then
		self
	else 
		self.refImmediateComposite().getDataTypeContainer()
	endif;

helper context kdm!Element def: isViolation(): Boolean =
	if self.oclIsKindOf(kdm!KDMEntity) then
		self.isEntityViolation()
	else
		if self.oclIsKindOf(kdm!KDMRelationship) then
			self.isRelationshipViolation()
		else
			false
		endif
	endif;

helper context OclAny def: getViolation(): OclAny =
	thisModule.resolveTemp(self, 'tgt');

helper context kdm!DataElement def: getLowerCardinality(): Integer =
	let attribute: kdm!Attribute =
		self.attribute -> select(e | e.tag = 'inheritance') -> first()
	in
		if (attribute.oclIsUndefined()) then
			0
		else
			if (attribute.value = 'final') then
				1
			else
				0
			endif
		endif;

-- ### Helpers ### -- end
-- StructureModel transformation
rule StructureModelToModel {
	from
		src: kdm!StructureModel (
			src.name = 'violations'
		)
	to
		tgt: uml!Model (
			name <- src.name,
			packagedElement <- src.structureElement
		)
}

-- Subsystem transformation
rule SubsystemToPackage {
	from
		src: kdm!Subsystem (
			src.getModelContainer().name = 'violations'
		)
	to
		tgt: uml!Package (
			name <- '<Subsystem>' + src.name,
			packagedElement <- src.structureElement
		)
}

-- Layer transformation
rule LayerToPackage {
	from
		src: kdm!Layer (
			src.getModelContainer().name = 'violations' and not (src.inAggregated ->
					isEmpty() and src.outAggregated -> isEmpty())
		)
	to
		tgt: uml!Package (
			name <- '<Layer>' + src.name,
			packagedElement <- src.structureElement
		)
}

-- Layer transformation
rule ComponentToPackage {
	from
		src: kdm!Component (
			src.getModelContainer().name = 'violations' and not (src.inAggregated ->
					isEmpty() and src.outAggregated -> isEmpty())
		)
	to
		tgt: uml!Package (
			name <- '<Component>' + src.name,
			packagedElement <- src.structureElement
		)
}

-- Package transformation
rule ModuleToPackage {
	from
		src: kdm!Package (
			src.isViolation()
		)
	to
		tgt: uml!Package (
			name <- src.name,
			visibility <- src -> getVisibility(),
			packagedElement <- src.codeElement
		)
	do {
		if (src = src -> findViolatedStructureImplementation()) {
			thisModule.resolveTemp(src -> findViolatedStructure(), 'tgt').packagedElement
				<- tgt;
		}
	}
}

-- Extends transformation
rule ExtendsToGeneralization {
	from
		src: kdm!Extends (
			src.isViolation()
		)
	to
		tgt: uml!Generalization (
			general <- src.to.getViolation()
		)
	do {
		src.refImmediateComposite().getViolation().generalization <- tgt;
	}
}

-- Implements transformation
rule ImplementsToInterfaceRealization {
	from
		src: kdm!Implements (
			src.isViolation()
		)
	to
		tgt: uml!InterfaceRealization (
			supplier <- src.to.getViolation(),
			client <- src.from.getViolation(),
			contract <- src.to.getViolation()
		)
	do {
		src.refImmediateComposite().getViolation().interfaceRealization <- tgt;
	}
}

lazy rule createPseudoCode {
	from 
		src: kdm!AggregatedRelationship
	using {
		comment: String = '';
		relationFound: Boolean = false;
	}
	to
		tgt: uml!Comment (
			annotatedElement <- src
		)
	do {
		for (relation in src.relation) {
			relationFound <- false;
			if (relation.oclIsKindOf(kdm!Extends) or relation.oclIsKindOf(kdm!Implements)) {
				-- Skip inheritance and implementation
				relationFound <- true;
			}
			if (relation.oclIsKindOf(kdm!HasType)) {
				-- Skip association
				if (relation.refImmediateComposite().refImmediateComposite().oclIsKindOf(kdm!ClassUnit)) {
					relationFound <- true;
				}else {	
					-- Parameter and Return type
					if (relation.refImmediateComposite().oclIsKindOf(kdm!ParameterUnit)) {
						
						if (relation.refImmediateComposite().kind = #return) {
							comment <- comment.concat(relation.refImmediateComposite().type.name).
							concat(' ').
							concat(relation.refImmediateComposite().refImmediateComposite().refImmediateComposite().name).
							concat('([parameters])').
							concat(';\n************************\n');
							
							relationFound <- true;
						}else if (relation.refImmediateComposite().kind = #throws) {
							comment <- comment.concat('[return type]').
							concat(' ').
							concat(relation.refImmediateComposite().refImmediateComposite().refImmediateComposite().name).
							concat('([parameters]) throws ').
							concat(relation.to.name).
							concat(';\n************************\n');
							
							relationFound <- true;
						}else{
							comment <- comment.concat('[return type]').
							concat(' ').
							concat(relation.refImmediateComposite().refImmediateComposite().refImmediateComposite().name).
							concat('(').
							concat(relation.to.name).
							concat(' ').
							concat(relation.from.name).
							concat(')').
							concat(';\n************************\n');
							
							relationFound <- true;
						}
					}else{
						-- Local variable declaration
						if (not relation.refImmediateComposite().type.name.oclIsUndefined() and not relation.refImmediateComposite().name.oclIsUndefined()) {
							comment <- comment.concat(relation.refImmediateComposite().type.name).
									concat(' ').concat(relation.refImmediateComposite().name).
									concat(';\n************************\n');
							
							relationFound <- true;
						}
					}
				}
			}
			-- Class instantiation
			if (relation.oclIsKindOf(kdm!Creates)) {
				if (relation.refImmediateComposite().refImmediateComposite().
						actionRelation -> exists(e | e.oclIsKindOf(kdm!Writes))) {
					comment <- comment.concat(relation.refImmediateComposite().
							refImmediateComposite().actionRelation -> select(e | e.
							oclIsKindOf(kdm!Writes)) -> first().to.name).concat(' = ');
				}
					
				comment <- comment.concat('new ').concat(relation.to.name).
						concat('();\n************************\n');
				
				relationFound <- true;
			}
			
			-- Import
			if (relation.oclIsKindOf(kdm!Imports)) {
				comment <- comment.concat('import ').concat(relation.to.name).
						concat(';\n************************\n');
				
				relationFound <- true;
			}
			
			-- Method call / Static method call
			if (relation.oclIsKindOf(kdm!Calls)) {
				if (relation.refImmediateComposite().actionRelation->exists(r | r.oclIsKindOf(kdm!Creates))) {
					-- Skip Calls with Creates
					relationFound <- true;
				}else{
					comment <- comment.concat('[object/class].').concat(relation.to.name).concat('()').
							concat(';\n************************\n');
					
					relationFound <- true;
				}
			}	
			
			if (relation.oclIsKindOf(kdm!UsesType)) {
				if (relation.refImmediateComposite().kind = 'cast') {
					comment <- comment.concat('(').concat(relation.to.name).concat(') [object]').
							concat(';\n************************\n');
					
					relationFound <- true;
				}
				if (relation.refImmediateComposite().kind = 'instanceof') {
					comment <- comment.concat('[object] instanceof ').concat(relation.to.name).
							concat(';\n************************\n');
					
					relationFound <- true;
				}
			}
			
			if (not relationFound) {
				relation.oclType().debug('relation');
				relation.refImmediateComposite().debug('parent');
				relation.refImmediateComposite().oclType().debug('parent type');
				relation.refImmediateComposite().refImmediateComposite().debug('grandparent');
				relation.refImmediateComposite().refImmediateComposite().oclType().debug('grandparent type');
				relation.from.debug('from');
				relation.to.debug('to');
				'------------'.println();
			}
		}
		tgt.body <- comment;
	}
}

rule AggregatedRelationshipToDependency {
	from
		src: kdm!AggregatedRelationship (
			src.getModelContainer().name = 'violations' and src.relation -> exists(e | 
					e.oclIsKindOf(kdm!Calls) or e.oclIsKindOf(kdm!Creates) or 
					e.oclIsKindOf(kdm!UsesType) or e.oclIsKindOf(kdm!Imports) or 
					e.oclIsKindOf(kdm!HasType) and not e.refImmediateComposite().
					refImmediateComposite().oclIsKindOf(kdm!ClassUnit))
		)
	using {
		srcClass: kdm!DataType = src.relation -> first().from.getDataTypeContainer();
		destClass: kdm!DataType = src.relation -> first().to.getDataTypeContainer();
	}
	to
		tgt: uml!Dependency (
			client <- srcClass.getViolation(),
			supplier <- destClass.getViolation(),
			ownedComment <- thisModule.createPseudoCode(src)
		)
	do {
		srcClass.getParent().getViolation().packagedElement <- tgt;
	}
}

lazy rule DataElementToAssociation {
	from
		src: kdm!DataElement
	to
		tgt: uml!Association (
			memberEnd <- src.getViolation(),
			memberEnd <- targetProperty,
			ownedEnd <- targetProperty
		),
		targetProperty: uml!Property (
			type <- src.getParent().getViolation()
		)
	do {
		src -> getParent().getParent().getViolation().packagedElement <- tgt;
	}
}

rule StorableUnitToProperty {
	from
		src: kdm!StorableUnit (
			not (src.kind = #local) and not
					(src.refImmediateComposite().oclIsTypeOf(kdm!CodeModel)) --
					-- Unresolved items
			 and src.isViolation()
		)
	to
		tgt: uml!Property (
			name <- src.name,
			visibility <- src -> getVisibility(),
			type <- src -> getDataElementType().getViolation(),
			isStatic <- if (src.kind = #static) then
					true
				else
					false
				endif,
			lowerValue <- lower,
			upperValue <- upper
		),
		lower: uml!LiteralInteger (
			value <- src.getLowerCardinality()
		),
		upper: uml!LiteralUnlimitedNatural (
			value <- src.getUpperCardinality()
		)
	do {
		src.refImmediateComposite().getViolation().ownedAttribute <- tgt;
		
		if (not (src -> getDataElementType().oclIsUndefined())) {
			if (not (src -> getDataElementType() -> isPrimitiveType())) {
				thisModule -> DataElementToAssociation(src);
			}
		}
	}
}

-- InterfaceUnit transformation
rule InterfaceUnitToInterface {
	from
		src: kdm!InterfaceUnit (
			not src.refImmediateComposite().oclIsTypeOf(kdm!TemplateUnit) and src.
					refImmediateComposite().oclIsTypeOf(kdm!Package) and src.isViolation()
		)
	to
		tgt: uml!Interface (
			name <- src.name,
			visibility <- src -> getVisibility() 			
		)
	do {
		if (src = src -> findViolatedStructureImplementation()) {
			thisModule.resolveTemp(src -> findViolatedStructure(), 'tgt').packagedElement
				<- tgt;
		}
	}
}

-- ClassUnit transformation
rule ClassUnitToClass {
	from
		src: kdm!ClassUnit (
			src.refImmediateComposite().oclIsTypeOf(kdm!Package) and not src.
					refImmediateComposite().oclIsTypeOf(kdm!StorableUnit) and not src.
					refImmediateComposite().oclIsTypeOf(kdm!TemplateUnit) and src.
					isViolation()
		)
	to
		tgt: uml!Class (
			name <- src.name,
			visibility <- src -> getVisibility(),
			isAbstract <- src.isAbstract
		)
	do {
		if (src = src -> findViolatedStructureImplementation()) {
			thisModule.resolveTemp(src -> findViolatedStructure(), 'tgt').packagedElement
				<- tgt;
		}
	}
}

rule EnumeratedTypeToEnumeration {
	from 
		src: kdm!EnumeratedType (
			src.isViolation()
		)
	to 
		tgt: uml!Enumeration (
			name <- src.name,
			visibility <- src -> getVisibility()
		)
}
